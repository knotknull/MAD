# MAD
MAD: Microservices Architecture and Design

Understanding core concepts, challenges and hybrid architectures

REST

gRPC / gRPC.io : RPC on top of protobuf  (10x over rest ??)


Fallacies of Distributed Computing:
  1. The Network Is Reliable
  2. Latency is zero    (Tremote > Tlocal)
  3. Bandwidth is infinite
  4. Network is secure
  5. Topology doesn't change
  6. There is one administrator
  7. Transport cost is zero
  8. The network is homogeneous

  Distributed Architecture:  contract creation, maintenance,
                             versioning and coordination

  Distributed logging facilities to provide a holistic view of a transaction


                        ----------------
                        |              |
                        | client app   |
                        |              |
                        ----------------
                      /
                     /
  ----------------  /      ---------------
  |              |         |             |
  | client app   |  -----> | client app  |
  |              |         |             |
  ----------------  \      ---------------
                     \
                      \
                        ----------------
                        |              |
                        | client app   |
                        |              |
                        ----------------


  Atomic transactions and transaction scope

Microservice: fine-grained, single purpose service that does
              one thing really well  (Single Purpose Service)

devopsbookmarks.com

Bounded Context:

Business Model combined w/ code, rules and data is only that service's


What is the right size for a Microservice ???
  - purpose
  - transactions
  - coreography


Shared Nothing Architecture
  - each microservice has it's own db

  API layer / endpoint proxy:
    - apache
    - HA Proxy
    - NGinx
    - Squid
    - ZIProxy

  API Gateway (integration hub):
        - Apache Camel
        - Mule ESB
        - JBOSS


    [load balancer]  <-> [gateway] <-> [proxy]



service-based architecture:
      - service granularity
      - database scope
      - deployment pipeline


  migration patterns:
        - identify logical components
        - flatten and refactor components
        - identify component dependencies
              - component coupling analysis
        - identify component groups (domains)
        - identify domain dependencies
        - create remote user interface
          [UI]  <-> [API Facade] <-> [domain dependencies]
        - migrate domains to "macro" services
        - migrate "macro" services to mirco services

##################################################
## service identification
##################################################

  - nginx as an API layer (with load balancing)
  - kubernetes also works as this


[function driven]  <-->  [data driven]  <-->   [request driven]


  [ identify coarse-grained functional areas]
                  |
                  v
  [ create coarse-grained microservices ]
                  |
                  v
  [ map services to data tables ]
                  |
                  v
  [ refine service granularity ]
                  |
                  v
  [ create service dependencies ]
                  |
                  v
  [ identify orchestration level ]




##################################################
## service identification
##################################################

Service cohesion:  weak coupling / strong cohesion


 ----------------------
|                      | --> add customer demographics
|                      | --> update customer demographics
|                      | --> get customer demographics
|   Customer Service   | --> notify customer
|                      | --> get customer comments
|                      | --> remove customer demographics
 ----------------------



 ----------------------
|  Customer            | --> add customer demographics
|  demographics        | --> update customer demographics
|                      | --> get customer demographics
 ----------------------
 ----------------------
| Customer Notification | --> notify customer
 ----------------------
 ----------------------
|  Customer            | --> get customer comments
|  comments            | --> remove customer demographics
 ----------------------




##################################################
## service design
##################################################

  - direct access design
[api layer]  <->  [module]

  - api access design
[api layer]  <->  [api access facade]  <->  [module]

  - domain-based api access design
[ retrieve api ]  <->  [module]
[  update api  ]  <->  [module]


  - service-based api access design
[api / access facade ]  <->  [module]


api access design benefits:
    - separation of concerns
    - protocol-agnostic processing
    - service context / binding
    - service catalog


##################################################
## service communication
##################################################

service communication patterns
    - REST
    - messaging
    - remote procedure call
    - API gateway
    - orchestrator pattern
    - aggregator pattern
    - gateway pattern
    - service mesh


NOTE: REST latency at each layer of api / facade

## Messaging between services:
     - Async capabilities


 -----------
|  service  |
|  component|
 -----------  \         -------------
               \  --->  |  service   |
               /        |  component |
              /         -------------
 -----------
|  service  |
|  component|
 -----------


## Messaging between services:
     - request / reply
developertoarchitect.com > lessons  > #1

 -----------   req    -------------
|           |  --->  |             |
|  service  |  <---  |  service    |
|  component|  resp  |  component  |
 -----------          -------------
(messaging: MQ)


## Messaging between services:
     - broadcast


                       -----------
                    > |  service  |
                   /  |  component|
  -------------   /    -----------
  |  service   | /
  |  component | \
  -------------   \
                   \    -----------
                    >  |  service  |
                       |  component|
                        -----------


## Messaging between services:
supervisor / event consumer
     - events



 ------------            -------------
|             |         |             |
|  supervisor |  --->   |  event      |
|             |         |  consumer   |
 -------------           -------------
        |
        |
        -----------------> [event channel]

        - monitor queue depth
        - determine consumers needed (depth / 2)
        - apply max threshold (eg. 20 consumers)
        - add or remove consumers as needed



## Messaging between services:
  remote procedure call (gRPC)
  (grpc.io)


 ------------                               -------------
|             |  HTTP/2 w/ protocol buffer |             |
|  client     |  ------------------->      |   server    |
|             |  <------------------       |             |
 -------------                              -------------
           (gRPC stub)





## Messaging between services:
  service orchestration pattern
    - microservice orchestrator

## Messaging between services:
  service aggregation


## Messaging between services:
  service gateway
      - microservice gateway


## Messaging between services:
Service mesh



    client request            client request
           v                        v
-------------------------------------------------------
|   api (mesh) controller                             |
-------------------------------------------------------
           ---------                  ---------
 -------  | service |       -------  | service |
|sidecar| |component|      |sidecar| |component|
 -------   ---------        -------   ---------

  - inter-service comm        - security
  - circuit breaker           - logging
  - service migration         - metrics
  - service discovery         - analytics

  - linkerd           - envoy
  - kubernetes        - conduit (kubernetes using conduit)
  - istio




##################################################
## distributed data (challenges)
##################################################

Challenges:
  - performance (latency)
  - scalability
  - testability
  - deployability
  - reliability
  - availability




----------------------------------------------------------------
|                     api layer                                |
----------------------------------------------------------------

 -----------     -------------    -------------    -------------
|           |   |             |  |             |  |             |
|  service  |   |  service    |  |  service    |  |  service    |
|  component|   |  component  |  |  component  |  |  component  |
 -----------     -------------    -------------    -------------
          \      /                          \       /
           \    /                            \     /
         -----------                       -----------
         [  Data   ]                       [  Data   ]
         [ Domain  ]                       [ Domain  ]
         -----------                       -----------

Create data taxonomy (classification)
   - operational data
   - transactional data
   - reference data
   - analytical data
   - reporting data



map information to business functions:
                               ------------
   positions             ---> |            |
   alpha calculations    ---> |            |   -----> portfolio delta
   benchmarks            ---> |  portfolio |
   issuer streaming data ---> | rebalancing|   -----> risk analytics
   time series analytics ---> |            |
   restricted lists     --->  |            |   -----> trade lists
                               ------------


map information to physical database tables:


    positions      ------>  [ [eod_positions] [curr_pos]    [prior_post] ]
 issuer streaming data -->  [ [eod_positions] [curr_pos]    [prior_post] ]
    restricted lists  --->  [ [fi_restrict]   [fx_restrict] [eq_restrict]]





#############################################################
## handling common data
#############################################################




----------------------------------------------------------------
|                        api layer                             |
----------------------------------------------------------------

 -----------     -------------    -------------    -------------
|           |   |             |  |             |  |             |
|  service  |   |  service    |  |  service    |  |  service    |
|  component|   |  component  |  |  component  |  |  component  |
 -----------     -------------    -------------    -------------
             \          /                    \       /
               \       /                      \     /
-------          -----------                 -----------
[common] <-updt  [  Data   ]                 [  Data   ]
[ data ]         [ Domain  ]                 [ Domain  ]
-------          -----------                 -----------
    |                 ^                           ^
    |                 |                           |
    v                 |                           |
[---------------------------distributed cache---------------------------]



#############################################################
## distributed transactions
#############################################################


BASE:  basic availability, soft state, eventual consistency


 ---      ---             ---      ---         ---      ---
[   ] -> [   ]           [   ] -> [   ]       [   ] -> [   ]
 ---      ---             ---      ---         ---      ---
background  async       request based          event based





---------          ---------          ---------
|service|          |service|          |service|
| data  |          | data  |          | data  |
---------          ---------          ---------
    |                 ^                   ^
    |                 |                   |
    v                 |                   |
[--------------------------------------------------------------------]
| {delete id: 123}     event message queue                           |
[--------------------------------------------------------------------]
       ^
       |
   [delete id=123]






#
